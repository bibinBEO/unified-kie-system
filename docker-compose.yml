version: '3.8'

services:
  unified-kie-system:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: unified-kie-system
    restart: unless-stopped
    ports:
      - "8000:8000"
    volumes:
      - ./uploads:/app/uploads
      - ./results:/app/results
      - ./models:/app/models
      - ./logs:/app/logs
      - ./schemas:/app/schemas
    environment:
      # Server configuration
      - HOST=0.0.0.0
      - PORT=8000
      - WORKERS=1
      
      # Model configuration
      - NANONETS_MODEL=nanonets/Nanonets-OCR-s
      - LAYOUTLM_MODEL=microsoft/layoutlmv3-base
      - EASYOCR_LANGUAGES=en,de
      
      # Processing configuration
      - MAX_FILE_SIZE=52428800  # 50MB
      - MAX_PAGES=20
      - PROCESSING_TIMEOUT=300  # 5 minutes
      
      # GPU configuration (adjust based on your GPU)
      - FORCE_CPU=false
      - GPU_MEMORY_FRACTION=0.8
      
      # Storage configuration
      - CLEANUP_UPLOADS=true
      - RESULTS_RETENTION_DAYS=7
      
      # Security
      - ALLOWED_EXTENSIONS=.pdf,.png,.jpg,.jpeg,.docx,.txt,.csv
      - MAX_URL_SIZE=10485760  # 10MB
      
      # Logging
      - LOG_LEVEL=INFO
      
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Optional: Nginx reverse proxy for production
  nginx:
    image: nginx:alpine
    container_name: kie-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deployment/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./deployment/ssl:/etc/nginx/ssl:ro  # SSL certificates if available
    depends_on:
      - unified-kie-system
    profiles:
      - production

  # Optional: Redis for caching and job queues
  redis:
    image: redis:7-alpine
    container_name: kie-redis
    restart: unless-stopped
    volumes:
      - redis_data:/data
    profiles:
      - production

  # Optional: PostgreSQL for result storage
  postgres:
    image: postgres:15-alpine
    container_name: kie-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=kie_results
      - POSTGRES_USER=kie_user
      - POSTGRES_PASSWORD=kie_password_change_me
    volumes:
      - postgres_data:/var/lib/postgresql/data
    profiles:
      - production

volumes:
  redis_data:
  postgres_data: